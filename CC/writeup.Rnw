\documentclass[11pt]{article}
\usepackage{asa}
\usepackage{xspace}
\usepackage{natbib}
\usepackage{url} 
\usepackage{geometry} % see geometry.pdf on how to lay out the page. There's lots.
\geometry{a4paper} % or letter or a5paper or ... etc
% \geometry{landscape} % rotated page geometry
% See the ``Article customise'' template for come common customisations

%\definecolor{Blue}{rgb}{0,0,0.5}
\definecolor{purple}{rgb}{.4,0,.8}
\newcommand{\hh}[1]{{\color{magenta} #1}}
\newcommand{\sct}[1]{{\color{purple} #1}}
\newcommand{\sctq}[1]{{\color{red} #1}} %things in red are my questions for you! 

\title{A Geometry for Network Visualization in \MakeLowercase{\texttt{ggplot2}}}
\author{Sam Tyner and Heike Hofmann}
\date{} % delete this line to display the current date
%%% BEGIN DOCUMENT
\begin{document}

\maketitle
\begin{abstract}
Abstract will be here
\end{abstract}

% <<readingdata, message=FALSE>>=
%  library(ggplot2)
%  theme_net <- theme(aspect.ratio = 1, line = element_blank(), panel.background = element_blank(), plot.background = element_blank(), axis.text=element_blank(),axis.title=element_blank())
%  data(blood, football, theme_elements)
%  email.net <- read.csv("~/Dropbox/ggplot2/email-data.csv") 
%  email.net <- subset(email.net, day %in% c(9,13))
%  email.names <- data.frame(name = as.factor(unique(c(as.character(email.net$From),as.character(email.net$to))))) 
% @

\section{Introduction}
\hh{XXX Start out with an example :) ... madmen? }

\par The three necessary elements of any network visualization are the vertices, the edges, and the layout.  But once those three items are visualized, we usually find our visualization to be lacking.  We may want to color the vertices (or edges) by some sort of grouping variable, or we may want to make vertices of degree ten twice the size of vertices of degree five.  Many \texttt{R} packages already exist for network analysis and visualization such as \texttt{igraph} by \citet{igraph}, \texttt{sna} by \citet{sna}, and \texttt{network} by \citet{network.jss, network} but we have found these packages to have unintuitive or burdensome methods for customizing the colors, sizes, etc of the vertices and edges of the network. For instance, the \texttt{igraph} package allows for coloring vertices by groups but the user must assign the colors to each vertex individually as opposed to assigning color by a grouping factor variable. \\



\par The \texttt{GGally} package by \citet{ggally} contains a very useful function written by Fran\c{c}ois Briatte and Moritz Marbach called \texttt{ggnet} that does allow for fairly straightforward customization of these three necessary graph attributes. \hh{XXX drive home the message that vertices, edges and layout are important, and repeat at this point} \sctq{Not quite sure what to say here. What follows is my guesstimate.} \sct{Coloring the vertices or edges in a graph is a quick and easy way to visualize grouping and can help with pattern or cluster detection. The vertices in a network and the edges between them compose the structure of a network, and being able to discover patterns among them visually is a key part of network analysis. Viewing multiple layouts of the same network can also help reveal patterns or clusters that would not be discovered when only viewing one layout or analyzing only an adjacency matrix.} The \texttt{ggnet} function, however, requires the graph input to be a \texttt{network} object according to the \texttt{network} package.  Our goal is to build off of the \texttt{ggnet} function and present an intuitive \texttt{geom} for network visualization within the \texttt{ggplot2} framework, without the need for objects other than simple data frames.  

  \subsection{Data Structure}
  In order for this geometry to work using data frames, there need to be two separate data frames given to the \texttt{geom\_net} function: one for the edge information and one for the vertex information. The vertex data frame should contain all the relevant vertex information. \emph{The only necessary variables are the vertex names/labels and the vertex degree (if undirected) or the vertex in degree and out degree (if directed).  The names and degrees are stored in columns and the rows are the vertices.  Other values of interest, such as grouping variables, for each vertex should be stored as columns in this dataframe, with an observation for each vertex.}  
  \par The edge data frame should contain all the relevant edge information. The only necessary variables are the ``from vertex" and ``to vertex" for each edge in the network. The From and To vertices should be listed according to the names of the vertices in the vertex information data frame. Other variables may also be included for each edge, such as the edge weight or grouping variable.  As before, the variables of interest are columns in the data frame and the rows are each edge in the network.%\footnote{I'm not 100\% certain of all of this yet, but so far it seems to me to be the best way to think about networks in terms of data frames.}

  \subsection{Vertex Aesthetics}
  In our geometry, the possible vertex aesthetics mimic the usual aesthetics in \texttt{ggplot2} for points.  The \texttt{vlabel} aesthetic is the name or number assigned to each vertex in order to uniquely identify it.  This aesthetic is most useful for smaller network objects where all vertex names can be printed on or near their corresponding vertices and still be readable by the human eye.  The \texttt{vcolor} aesthetic can be an identity color (e.g. \texttt{color = "red"} outside of the \texttt{aes} statement) to change the color of all vertices, or it can take a factor variable which identifies each vertex as belonging to one of several groups, and it colors the vertices of the graph according to this grouping.  It can also color the vertices according to the different values of  some numeric variable, such as degree.  The colors are set to the default color palette in \texttt{ggplot2}, and the palette used can be changed in the usual way within the \texttt{ggplot2} framework, by using \texttt{scale\_color\_brewer}.  
  %The \texttt{vcolor} aesthetic operates in the same way as the \texttt{vfill} aesthetic, but it changes the outline color of the vertex instead of the fill color of the vertex, which is in line with the \texttt{ggplot2} use of the \texttt{color} and \texttt{fill} aesthetics.  
  The \texttt{vsize} aesthetic can also be set to an identity value to increase or decrease the size of all vertices in the graph, or it can be set to the degree of the vertices in undirected graphs or the in-degree (or out-degree) of directed graphs.  \footnote{Sam's questions/notes: Is ``degree" going to be a column in our data frame? Or will we have to write something to detect degree size?} It can also be set to any other numeric variable associated with the vertices in the network.  The \texttt{vshape} aesthetic is for changing the shape of the vertices from the default circle to other shapes, like square or triangle.  It can also change the shape of the vertices according to some grouping variable.  Finally, the \texttt{valpha} aesthetic will change the vertex transparency to a set value, like 1/10, or to some numeric variable of interest that takes on the values $[0,1]$.  
  
\par Evidently, we created all of these aesthetics to fit in exactly to the \texttt{ggplot2} grammar of graphics. We also created the edge aesthetics in a similar fashion. 
  \subsection{Edge Aesthetics}
  Again, our edge aesthetics mimic the familiar \texttt{ggplot2} aesthetics, this time for lines.  The \texttt{elabel} aesthetic is the name or number assigned to each edge.  This aesthetic is most useful for visualizing random graphs or Markov processes, where each edge probability is of interest.  The \texttt{ecolor} aesthetic changes the color of all of the edges according to the identity function or can change the color according to a grouping variable.  It can also be used to color the edges in random graphs or Markov processes according to the probability of each edge. The \texttt{elinetype} aesthetic can also be used with a grouping variable to change the line type of each edge in the graph from solid to one of the many different types of dotted lines in \texttt{ggplot2}.  The \texttt{esize} aesthetic can also be set to the weight or probability of each edge, or it can be changed for all edges with the identity function.  The \texttt{ealpha} aesthetic can change the edge transparency to a set value, or to some numeric variable of interest that takes on the values $[0,1]$, such as edge weight or probability.  Finally, the \texttt{directed} aesthetic is a logical value that identifies whether or not the network is directed.  When this value is true, the arrows change size, color, etc. with the previous aesthetics. 
  
  \subsection{Layout Argument}
  \sct{There are many layouts to choose from, but the default layout is the Kamada-Kawai layout.  This is a force-directed layout for undirected networks \citep{kamadakawai}}.
  %and the default layout changes according the size of the graph.  For smaller networks, with less than $x$ vertices and $y$ edges, the default layout is INSERT DEFAULT HERE. For larger networks with more than $x$ vertices and $y$ edges, the default layout is INSERT DEFAULT HERE. %**Now justify these two statements with research to be done.** \hh{I don't think that you'd have to defend your choices of defaults. They are defaults, and can be changed. }}
  The \texttt{layout} \sct{argument in the \texttt{geom\_net} function} can be changed to any of the layouts also found in the \texttt{sna} package, such as circular, eigen, or Fruchterman-Reingold.  \sctq{Should I insert a table of layouts here? Or maybe not since it can't actually change the layout yet? And I took out the thing about the background color because I figure it can just be changed with \texttt{theme()}} %Finally, the background color of the graph can be changed with the \texttt{bgfill} aesthetic.  This aesthetic takes only the identity colors, not additional variables.%\footnote{Sam's notes: I'm not sure if what I've laid out here is possible or even reasonable.  I have not yet found any research into what layout is best based on number of edges, number of vertices, density of the network, or anything else. \hh{You're fine - those are things, which people are going to have strong opinions on without actual backup. You provide the environment for people to easily use network data in a familiar setting.}} 

\section{Many Many Examples}
\sctq{Format-wise, is it ok if each example is its own subsection?}\\
\sct{
In this section, we demonstrate the capabilities of \texttt{geom\_net} in a series of examples. 
  \subsection{Blood Donation}
  \sctq{I had to comment out all the code chunks for now. Not sure why but it won't compile if they're there.}
  \emph{Note: would be best with labels and direction}
}
<<blood_ex>>=
library(ggplot2) # this needs to be the ggplot2 with geom_net
ggplot(data = blood$edges, aes(from_id = from, to_id = to)) + geom_net(vertices = blood$vertices) + expand_limits(x = c(-5,5), y = c(-5,5)) + theme_net #add vlabel later
@
\sct{
  \subsection{Email Network}
  \emph{Note: would be best with labels and direction}
% # <<email_ex>>=
% # ggplot(data = email.net, aes(from_id = From, to_id = to, ealpha = 0.1,vsize = 2)) + geom_net(vertices = email.names) + expand_limits(x=c(-1,5), y = c(-1,5)) + facet_wrap(~day) + theme_net
% # @
  \subsection{\texttt{ggplot2} Theme Elements}
  \emph{Note: would be best with labels and direction}
% # <<theme_ex>>=
% # #ggplot(data = theme_elements$edges, aes(from_id = child, to_id = parent)) + geom_net(vertices = theme_elements$vertices) + expand_limits(x = c(-5,5), y = c(-5,5)) + theme_net
% # @
  \subsection{Madmen Network (again?? or no?)}
  \sctq{leaving blank for now.}
  \subsection{College Football}
  \emph{Note: would be best with coloring vertices by conference} \citet{football}
% # <<football_ex>>=
% # ggplot(data = football$edges, aes(from_id = from, to_id = to)) + geom_net(vertices = football$vertices) + expand_limits(x = c(-2.5,2.5), y = c(-2.5,2.5)) + theme_net
% # @
  \subsection{Les Mis\'{e}rables}
  \emph{Haven't looked at this one yet. Just found it on MEJ Newmans website.  http://www-personal.umich.edu/~mejn/netdata/}
}

\section{Technical Details}
\sctq{I have no idea exactly how detailed I should be. I'm going to attempt to be detailed without parsing each line in the code, but I do want to describe how everything works in detailed enough descriptions. I know you'll tell me if I'm too detailed or not detailed enough!}
\sct{
In order to construct the \texttt{geom} in \texttt{ggplot2}, we needed two \texttt{R} script files: a `stat' file and a `geom' file. The stat file performs all the necessary calculations on the two input data frames, and the geom file performs the drawing of the network.
  \subsection{Creating \texttt{stat\_net}}
  In order to plot the network with only the edge connections and vertex names, we relied on the \texttt{sna} and \texttt{network} packages \citep{sna, network.jss}. First, we used the edges data frame to construct a network object with the \texttt{as.network()} function, then constructed an adjacency matrix from that network using the \texttt{as.matrix.network.adjacency()} function.  This adjacency matrix is then passed to the chosen \texttt{gplot.layout.*()} function from the \texttt{sna} package.  \emph{When the layout argument is changed in the \texttt{geom\_net()} function, the corresponding \texttt{gplot.layout.*()} function in \texttt{sna} is called with a \texttt{do.call()} statement.} This layout function produces a matrix of coordinates of the vertices, which we then transform into a data frame containing the coordinates of the edges using the \texttt{as.matrix.network.edgelist()} function in \texttt{network}.  We are grateful to Moritz Marbach for his \texttt{gplot()} function which we used when creating this process \citep{marbach}.  At the end of the previous routine, we have a data frame with \texttt{x, y, xend,} and \texttt{yend} columns describing the edges and another data frame with \texttt{x,y} columns describing the vertices.  These two data frames, along with the many \texttt{aes()} and other argument options get passed on to the actual network geometry for drawing. 
  \subsection{Creating \texttt{geom\_net}}
  We constructed \texttt{geom\_net} using the drawing capabilities of the \texttt{geom\_point}, \texttt{geom\_line}, \emph{and \texttt{geom\_text}} functions that were already in \texttt{ggplot2}.  Using these capabilities, we were able to seamlessly incorporate our network geometry into the \texttt{ggplot2} structure.   We took our edges data frame and used that as our input to the \texttt{GeomSegment} draw function.  Then, on top of that, we plot the vertices by passing our vertex data frame to the \texttt{GeomPoint} draw function. \emph{Finally, we use the \texttt{GeomText} draw function to add the vertex and edge labels when the \texttt{vlabel} and \texttt{elabel} arguments, respectively, are true. *insert more detail here after figuring it out*}
} \sctq{This doesn't seem very long, but I already feel like there's too much detail! Should I add more?} 

\bibliographystyle{asa}
\bibliography{references}

\end{document}