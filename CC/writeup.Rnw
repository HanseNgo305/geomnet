\documentclass[11pt]{article}
\usepackage{asa}
\usepackage{xspace}
\usepackage{natbib}
\usepackage{url}
\usepackage{afterpage}
\usepackage{pdflscape}
\usepackage{geometry} % see geometry.pdf on how to lay out the page. There's lots.
\geometry{letterpaper} % or letter or a5paper or ... etc
% \geometry{landscape} % rotated page geometry
% See the ``Article customise'' template for come common customisations

%\definecolor{Blue}{rgb}{0,0,0.5}
\usepackage{color}
\definecolor{purple}{rgb}{.4,0,.8}
\newcommand{\hh}[1]{{\color{magenta} #1}}
\newcommand{\sct}[1]{{\color{purple} #1}}
\newcommand{\sctq}[1]{{\color{red} #1}} %things in red are questions for you or concerns that i have.

\title{A Geometry for Network Visualization in \MakeLowercase{\texttt{ggplot2}}}
\author{Sam Tyner and Heike Hofmann}
\date{} % delete this line to display the current date
%%% BEGIN DOCUMENT
\begin{document}

\maketitle
\begin{abstract}
Abstract will be here
\end{abstract}
<<chunk_setup, echo=FALSE>>=
library(knitr)
opts_chunk$set(tidy = FALSE, echo=FALSE, cache=FALSE, eval = TRUE, message = FALSE, warning = FALSE,  fig.height = 8, fig.width = 8, fig.align = 'center',fig.show='hide')
@
<<readingdata, eval=TRUE, echo=FALSE>>=
library(ggplot2) # needs to be the version with geom_net!
 theme_net <- theme(aspect.ratio = 1, line = element_blank(), panel.background = element_blank(), plot.background = element_blank(), axis.text=element_blank(),axis.title=element_blank())
 data(blood, football, theme_elements, lesmis)
names(blood$vertices)[1] <- 'label'
load("data/madmen.rda") # relative path should work for both of us
names(madmen$vertices)[1] <- 'label'
names(theme_elements$vertices)[1] <- 'label'
football$vertices$label <- as.factor(football$vertices$label)
football$vertices$value <- as.factor(football$vertices$value)
football$edges$in.conf <- 0
for (i in 1:nrow(football$edges)){
  idx1 <- which(football$vertices$label == football$edges$from[i])
  idx2 <- which(football$vertices$label == football$edges$to[i])
  if (football$vertices$value[idx1] == football$vertices$value[idx2]){
    football$edges$in.conf[i] <- 1
  }
}
email.net <- read.csv("data/email-data.csv")
email.names <- data.frame(label = as.factor(unique(c(as.character(email.net$From),as.character(email.net$to)))))
library(plyr)
email.net <- ddply(email.net, .(eID), transform, nrecipients=length(to))
employee <- read.csv("data/EmployeeRecords.csv")
employee <- merge(email.names, employee, by.x="label", by.y="EmailAddress", all.x=T)
library(RColorBrewer)
cols <- brewer.pal(8, name="Set1")
@

\section{Introduction}
At its core, a network is simply a set of points connected in pairs by a set of lines \citep{newman}.  Here, we refer to the lines as edges and the points as vertices, although these are also called nodes.  These two seemingly simple sets of graphical objects, points and segments, are used to encode a huge variety and quantity of information across many fields of study. For instance, networks of scientific collaboration, a food web of marine animals, and American college football games are all covered in a paper on community detection in networks by \citet{football}.  Additionally, \citet{networkfailures} examine node failure in interdependent networks like power grids.  Social networks, such as links between actors found on \url{www.imdb.com}, and neural networks, like the completely mapped neural network of the \textit{C. elegans} worm are also etensively studied \citep{smallworld}.  Networks vary widely in scope and complexity: the smallest network is simply an edge between two vertices, while one of the most commonly used and most complex networks, the world wide web, has billions of vertices (webpages) and billions of edges (hyperlinks) connecting them.  The edges in a network can  be directed or undirected: directed edges represent information travelling from one vertex to another, and switching the direction would change the structure of the network. The world wide web is an example of a directed network because one webpage may link to another, and not necessarily the other way around. Undirected edges, however, are simply connections between vertices.  Coauthorship networks that encode information about academic publications are examples of undirected networks because if two people author a paper together, that creates a connection between them that is bidirectional.

\par A social network is a network that everyone is a part of in one way or another.  We do not necessarily refer here to social media like Facebook or LinkedIn, but rather to the connections we form with other people. To demonstrate the functionality of our geometry for plotting networks, we have chosen an example of a social network from the popular television show Mad Men.  This network was compiled in \citet{madmen}.  In this example network, there are 52 vertices and 87 edges. Each vertex is a character on the show, and there is an edge between every two characters who have had a romantic relationship.

This network is shown in figure~\ref{fig.cap:madmen_ex}.
<<madmen_ex, dependson='madmen-prep', fig.cap = 'Network of Relationships in Mad Men'>>=
ggplot(data = madmen$edges, aes(from_id = Name1, to_id = Name2)) +
  geom_net(vertices = madmen$vertices, vsize=3, vlabel= TRUE, ecolour="grey30",
           aes(vcolour=c( "#FF69B4", "#0099ff")[as.numeric(Gender)])) +
  expand_limits(x = c(0,1.25), y = c(0,1)) + theme_net
@

\begin{figure}
\centering
\includegraphics[width=\textwidth]{figure/madmen_ex-1.pdf}
\caption{\label{fig.cap:madmen_ex} Graph of the characters in the show Mad Men who are linked by a romantic relationship.}
\end{figure}
\afterpage{\clearpage}

 In the plot, we can see one central character who has many more relationships than any other character. This vertex represents the main character of the show, Don Draper.
\par There are many kinds of networks, and networks are extensively studied across many disciplines.  Many sociologists study social networks, and many biologists study protein networks. As different as these and the many other disciplines that study networks are, they all need the ability to quickly and effectively visualize networks.  We found the current tools to be lacking in this ability, so we chose to fill this gap by adding network plotting capabilities to the popular and widely used \texttt{R} package \texttt{ggplot2}. \hh{Just to give an idea of the popularity and the wide=spread use of \texttt{ggplot2}:} From January 1, 2015 to March 21, 2015, \texttt{ggplot2} was downloaded over 270,000 times, or approximately 3,454 downloads per day. It has also been downloaded in 189 countries at least once, and in 31 of those countries, including China, Israel, and Colombia, it has been downloaded over 1,000 times.
\hh{This is the user base we are aiming at by making network visualizations a part of \texttt{ggplot2}.}

\par The three necessary elements of any network visualization are the vertices, the edges, and the layout.  But once those three items are visualized, we usually find our visualization to be lacking.  We may want to color the vertices (or edges) by some sort of grouping variable, or we may want to make vertices of degree ten twice the size of vertices of degree five.  Many \texttt{R} packages already exist for network analysis and visualization such as \texttt{igraph} by \citet{igraph}, \texttt{sna} by \citet{sna}, and \texttt{network} by \citet{network.jss, network} but we have found these packages to have unintuitive or burdensome methods for customizing the colors, sizes, etc of the vertices and edges of the network. For instance, the \texttt{igraph} package allows for coloring vertices by groups but the user must assign the colors to each vertex individually as opposed to assigning color by a grouping factor variable. \\


\par The \texttt{GGally} package by \citet{ggally} contains a very useful function written by Fran\c{c}ois Briatte and Moritz Marbach called \texttt{ggnet} that does allow for fairly straightforward customization of these three necessary graph attributes.
Coloring the vertices or edges in a graph is a quick and easy way to visualize grouping and can help with pattern or cluster detection. The vertices in a network and the edges between them compose the structure of a network, and being able to discover patterns among them visually is a key part of network analysis. Viewing multiple layouts of the same network can also help reveal patterns or clusters that would not be discovered when only viewing one layout or analyzing only an adjacency matrix. The \texttt{ggnet} function, however, requires the graph input to be a \texttt{network} object according to the \texttt{network} package.  Our work builds off of the \texttt{ggnet} function and presents an intuitive \texttt{geom} for network visualization within the \texttt{ggplot2} framework, without the need for objects other than simple data frames.

  \subsection{Data Structure}
  \hh{variable label links the two data sets - let's talk about it, and make it a formal requirement.}
  In order for this geometry to work using data frames, there need to be two separate data frames given to the \texttt{geom\_net} function: one for the edge information and one for the vertex information. The vertex data frame should contain all the relevant vertex information. \emph{The only necessary variables are the vertex names/labels and the vertex degree (if undirected) or the vertex in degree and out degree (if directed).  The names and degrees are stored in columns and the rows are the vertices.  Other values of interest, such as grouping variables, for each vertex should be stored as columns in this dataframe, with an observation for each vertex.}
  \par The edge data frame should contain all the relevant edge information. The only necessary variables are the ``from vertex" and ``to vertex" for each edge in the network. The From and To vertices should be listed according to the names of the vertices in the vertex information data frame. Other variables may also be included for each edge, such as the edge weight or grouping variable.  As before, the variables of interest are columns in the data frame and the rows are each edge in the network.%\footnote{I'm not 100\% certain of all of this yet, but so far it seems to me to be the best way to think about networks in terms of data frames.}

  \subsection{Vertex Aesthetics}

  In our geometry, the possible vertex aesthetics mimic the usual aesthetics in \texttt{ggplot2} for points.  The \texttt{vlabel} aesthetic is a logical value that prints the name or number assigned to each vertex in order to uniquely identify it on the plot. \sct{If this value is set to TRUE, the vertex data frame is required to have a column titled label.} This aesthetic is most useful for smaller network objects where all vertex names can be printed on or near their corresponding vertices and still be read clearly.  The \texttt{vcolor} aesthetic can be an identity color (e.g. \texttt{color = "red"}) to change the color of all vertices, \sct{XXX shouldn't we take this out? or it can take a factor variable which identifies each vertex as belonging to one of several groups, and it colors the vertices of the graph according to this grouping.}  \sct{Right now, the \texttt{vcolor} aesthetic does not work like a typical color aesthetic in \texttt{ggplot2}. It can, however, take HEX color characters and assign them to different levels of a factor variable.}  \sct{XXX We should probably take this out too. It can also color the vertices according to the different values of  some numeric variable, such as degree.  The colors are set to the default color palette in \texttt{ggplot2}, and the palette used can be changed in the usual way within the \texttt{ggplot2} framework, by using \texttt{scale\_color\_brewer}.}
  %The \texttt{vcolor} aesthetic operates in the same way as the \texttt{vfill} aesthetic, but it changes the outline color of the vertex instead of the fill color of the vertex, which is in line with the \texttt{ggplot2} use of the \texttt{color} and \texttt{fill} aesthetics.
  The \texttt{vsize} aesthetic can also be set to an identity value to increase or decrease the size of all vertices in the graph, or it can be set to the degree of the vertices in undirected graphs or the in-degree (or out-degree) of directed graphs. \sct{These must be integer-valued columns in the vertex data frame.} It can also be set to any other numeric variable associated with the vertices in the network.  The \texttt{vshape} aesthetic is for changing the shape of the vertices from the default circle to other shapes, like square or triangle.  It can also change the shape of the vertices according to some grouping variable, \sct{which is currently required to consist of integer values from 0 to 25.}.  Finally, the \texttt{valpha} aesthetic will change the vertex transparency to a set value, like 1/10, or to some numeric variable of interest that takes on the values $[0,1]$.

\par Evidently, we created all of these aesthetics to fit in exactly to the \texttt{ggplot2} grammar of graphics. We also created the edge aesthetics in a similar fashion.
  \subsection{Edge Aesthetics}
  Again, our edge aesthetics mimic the familiar \texttt{ggplot2} aesthetics, this time for lines.  \sct{XXX take out this??? The \texttt{elabel} aesthetic is the name or number assigned to each edge.  This aesthetic is most useful for visualizing random graphs or Markov processes, where each edge probability is of interest.}  The \texttt{ecolor} aesthetic changes the color of all of the edges according to the identity function or can change the color according to HEX colors assigned to levels of a grouping variable.  %It can also be used to color the edges in random graphs or Markov processes according to the probability of each edge.
  The \texttt{elinetype} aesthetic can also be used with a grouping variable to change the line type of each edge in the graph from solid to one of the different types of lines in \texttt{ggplot2}. \sct{The column associated with this aesthetic must be integer valued and take on values from one to six.}  The \texttt{esize} aesthetic can also be set to the weight or probability of each edge, or it can be changed for all edges with the identity function. \sct{The associated column can take on any numerical values.}  The \texttt{ealpha} aesthetic can change the edge transparency to a set value, or to some numeric variable of interest that takes on the values $[0,1]$, such as edge weight or probability. \sct{This property is especially useul for networks with a lot of connections and with vertices of relatively high degree.}  \sct{XXX should we take this out? Finally, the \texttt{directed} aesthetic is a logical value that identifies whether or not the network is directed.  When this value is true, the arrows change size, color, etc. with the previous aesthetics.}

  \subsection{Layout Argument}
  \sct{There are many layouts to choose from, but the default layout is the Kamada-Kawai layout.  This is a force-directed layout for undirected networks \citep{kamadakawai}}.
  %and the default layout changes according the size of the graph.  For smaller networks, with less than $x$ vertices and $y$ edges, the default layout is INSERT DEFAULT HERE. For larger networks with more than $x$ vertices and $y$ edges, the default layout is INSERT DEFAULT HERE. %**Now justify these two statements with research to be done.** \hh{I don't think that you'd have to defend your choices of defaults. They are defaults, and can be changed. }}
  The \texttt{layout} \sct{argument in the \texttt{geom\_net} function} can be changed to any of the layouts also found in the \texttt{sna} package, such as circular, eigen, or Fruchterman-Reingold.  \sctq{Should I insert a table of layouts here? And I took out the thing about the background color because I figure it can just be changed with \texttt{theme()}} %Finally, the background color of the graph can be changed with the \texttt{bgfill} aesthetic.  This aesthetic takes only the identity colors, not additional variables.%\footnote{Sam's notes: I'm not sure if what I've laid out here is possible or even reasonable.  I have not yet found any research into what layout is best based on number of edges, number of vertices, density of the network, or anything else. \hh{You're fine - those are things, which people are going to have strong opinions on without actual backup. You provide the environment for people to easily use network data in a familiar setting.}}

\section{Many Many Examples}
\sctq{Format-wise, is it ok if each example is its own subsection? Also, can you check the references I added to the .bib file to make sure I'm creating them correctly? I've just been appending them.}\\
\sct{
In this section, we demonstrate the capabilities of \texttt{geom\_net} in a series of examples.
  \subsection{Blood Donation}
  \emph{Note: would be best with labels and direction}\\
  In this directed network, there are eight vertices and 27 edges.  The vertices represent the eight different blood types in humans that are most important for donation: the ABO blood types A, B, AB, and O, combined with the RhD positive and negative types. \sctq{Can I cite wikipedia here? Should I find a more academic source?}  The edges are directed: a person whose blood type is that of a \emph{from} vertex can to donate blood to a person whose blood type is that of a corresponding \emph{to} vertex. In the example below, loops are removed.  Loops exist on every vertex in this example, as blood of matching ABO and RhD type can always be received.
}
<<blood_ex, echo=TRUE, fig.cap= "Directed network of blood type donations in humans.">>=
ggplot(data = blood$edges, aes(from_id = from, to_id = to)) +
  geom_net(vertices = blood$vertices, layout='circle', vlabel = TRUE, vsize = I(2), directed = TRUE) +
  expand_limits(x = c(0,1), y = c(0,1)) + theme_net #add direction later
@

\sct{
This network is shown in figure \ref{fig.cap:blood_ex}.
\begin{figure}
\centering
\includegraphics[width=\textwidth]{figure/blood_ex-1.pdf}
\caption{\label{fig.cap:blood_ex} Network of blood donation possibilities in humans by ABO and RhD blood types.}
\end{figure}
\afterpage{\clearpage}

\subsection{Email Network}
  \emph{Note: would be best with coloring and direction}
  This email network comes from the 2014 VAST Challenge \citep{emailnet}. It is a directed network of emails between company employees with 55 vertices and 9,063 edges. Each vertex is an employee of the company, and each edge is an email sent from one employee to one or more other employees. The arrow of the directed edge points to the recipient(s) of the email. The network contains two business weeks of emails across the entire company. }
<<email_ex, fig.cap = 'All emails within a company over a two week period.'>>=
ggplot(data = subset(email.net, nrecipients < 54), aes(from_id = From, to_id = to)) +
  geom_net(vertices = employee,ealpha = 0.1, vsize = I(4), directed = TRUE,
           aes(vcolour=cols[as.numeric(CurrentEmploymentType)])) +
  expand_limits(x=c(0,1), y = c(0,1)) +
  theme_net
@
\begin{figure}
\centering
\includegraphics[width=\textwidth]{figure/email_ex-1.pdf}
\caption{\label{fig.cap:email_ex} Email network within a company over a two week period.}
\end{figure}
\afterpage{\clearpage}


\sct{This network is plotted in figure \ref{fig.cap:email_ex}.  This plot is very crowded, and it is difficult to distinguish structure in the network when it there is so much over-plotting.  To remedy this, we facet the network by day to examine how the company's communications change throughout the week. }
<<email_ex_facet, fig.height=8, fig.width=8, fig.cap = 'All emails within a company over a two week period facetted by day of the month.'>>=
ggplot(data = subset(email.net, nrecipients < 54), aes(from_id = From, to_id = to, )) +
  geom_net(vertices = employee,ealpha = 0.1, vsize = I(2), directed = TRUE,
           aes(vcolour=cols[as.numeric(CurrentEmploymentType)])) +
  expand_limits(x=c(0,1), y = c(0,1)) +
  facet_wrap(~day, nrow = 2) +
  theme_net
@
\begin{landscape}
\begin{figure}
\centering
\includegraphics[width=\textwidth]{figure/email_ex_facet-1.pdf}
\caption{\label{fig.cap:email_ex_facet} The same email network as in figure \ref{fig.cap:email_ex} facetted by day of the week.}
\end{figure}
\end{landscape}

\sct{This plot is shown in figure \ref{fig.cap: email_ex_facet}.  \sctq{XXX note for later: remove all the emails that go to everyone in the network.} With the facetting, we can see that there are between four and seven employees sending \sctq{or receiving? will know with direction option added later} several emails each day to a majority of the company. We can also see clusters that have formed on the perimeter of each day's network where the employees are communicating heavily with each other, but not much outside of their cluster. We can also see that there is heavier inter-cluster communication on different days.  For example, day 17 has more concentrated in-group communication than day 15. Additionally, we can better distinguish the communication of the outlying employee, who only corresponds with up to four other complany employees on a given day.} \sctq{talk about clusters being different departments within the company?}
  \subsection{\texttt{ggplot2} Theme Elements}
  \emph{Note: would be best with labels and direction} \\
  \sct{This example comes from the \texttt{theme()} help page in the \texttt{ggplot2} documentation \citep{ggplot}.  It is a directed network which shows the structure of the inheritance of theme options in the construction of a \texttt{ggplot2} plot.  There are 53 vertices and 36 edges in this network.  There is an arrow from one vertex to another if the element represented by the \emph{to} vertex inherits its values from the \emph{from} vertex.  For example, the \texttt{axis.ticks.x} option inherits its value from the \texttt{axis.ticks} value, which inherits its value from the \texttt{line} option.  Thus, setting the \texttt{line} option to a value such as \texttt{element\_blank()} sets the entire inheritance tree to \texttt{element\_blank()}, and thus no lines appear anywhere on the plot background. Finally, we note that the vertices with no edges were incorporated into the plot by adding their labels to the edges data frame in both the  `from\_id' and `to\_id' columns before passing the edges data frame to \texttt{ggplot}.  }
<<theme_ex, echo=TRUE, fig.cap= 'Inheritance structure for \\texttt{theme} elements in \\texttt{ggplot2}.'>>=
ggplot(data = theme_elements$edges, aes(from_id = parent, to_id = child)) +
  geom_net(vertices = theme_elements$vertices, directed = TRUE, vlabel = TRUE) +
  expand_limits(x = c(0,1.2), y = c(0,1)) +
  theme_net
@
\begin{figure}
\centering
\includegraphics[width=\textwidth]{figure/theme_ex-1.pdf}
\caption{\label{fig.cap:theme_ex} Inheritance structure of \texttt{ggplot2} theme elements. This is a recreation of the graph found at \protect\url{http://docs.ggplot2.org/current/theme.html}.}
\end{figure}
\afterpage{\clearpage}

\sct{The inheritance structure is plotted in figure \ref{fig.cap:theme_ex}.
  \subsection{Madmen Network (again?? or no?)}
  \sctq{leaving blank for now.} \hh{i don't think we need to repeat it, but you could show the code for the example here and give the reference to the example. are there any more details you wanted to talk about?}
  \subsection{College Football}

  This next example comes from M.E.J. Newman's network data web page \citep{football}.  It is an undirected network consisting of all regular season college football games played between Division I schools in Fall of 2000.  There are 115 vertices and 613 edges: each vertex represents a school, and an edge represents a game played between two schools.}
<<football_ex, echo=TRUE, fig.cap="All regular season Division I college football games in the Fall 2000 season.">>=
ggplot(data = football$edges, aes(from_id = from, to_id = to, elinetype = in.conf + 1)) +
  geom_net(vertices = football$vertices, ealpha = 0.2, vsize = 2, vlabel = TRUE, aes(vcolour=c("#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A","#FFFF99","#B15928")[as.numeric(factor(value))])) +
  expand_limits(x = c(0,1), y = c(0,1)) +
  theme_net
@
The network of football games is given in figure \ref{fig.cap:football_ex}.
\begin{figure}
\centering
\includegraphics[width=\textwidth]{figure/football_ex-1.pdf}
\caption{\label{fig.cap:football_ex} The network of regular season Division I college football games in the season of fall 2000. The vertices and their labels are colored by conference.}
\end{figure}
\afterpage{\clearpage}

  \subsection{Les Mis\'{e}rables}
  \emph{Note: data set has edge weightings for number of co-occurences of characters. esize would be useful here!} \\
  This next network comes from \citet{lesmis}. It is an undirected network of coappearances of characters in Victor Hugo's \emph{Les Mis\'{e}rables}.  There are 77 vertices representing each of the 77 characters in the book, and an edge connects two vertices if those two characters appear in the same chapter of the book.  There are 254 edges in this network. The edges are also weighted by the number of coappearances. The largest weighting is 31, between the characters Jean Valjean and Cosette.
<<lesmis_ex, echo=TRUE, fig.cap="Coappearance network of characters in Victor Hugo's \\emph{Les Mis\\'{e}rables}">>=
ggplot(data = lesmis$edges, aes(from_id = from, to_id = to, esize = value/mean(value))) +
  geom_net(vertices = lesmis$vertices, ealpha = 7/10,
           layout = 'fruchtermanreingold', vlabel=TRUE) +
  expand_limits(x = c(0,1.1), y = c(0,1)) + theme_net
@
\begin{figure}
\centering
\includegraphics[width=\textwidth]{figure/lesmis_ex-1.pdf}
\caption{\label{fig.cap:lesmis_ex} Co-appearance network of characters in Victor Hugo's \emph{Les Mis\'{e}rables}.}
\end{figure}
\afterpage{\clearpage}


  \subsection{Protein Interaction Network in Yeast}
  This example of a protein interaction network comes from \citet{protein}. It is the complete protein-protein interaction network in the yeast species \emph{S. cerevisiae}. There are 1,870 proteins that make up the vertices of this network, and there are 2,240 edges between them.  These edges represent ``direct physical interactions" between any 2 proteins \citep[][p. 42]{protein}.
<<read_data>>=
yeast <- read.table("data/protein.txt")
yeast <- list(edges = yeast, vertices = data.frame(label = min(yeast):max(yeast)))
@
<<yeast_ex, echo=TRUE, fig.cap="Protein in protein interation network in yeast.", cache=TRUE>>=
ggplot(data = yeast$edges, aes(from_id = V1, to_id = V2)) +
  geom_net(vertices = yeast$vertices, ealpha = 0.1, valpha = .5) +
  expand_limits(x = c(0,1), y = c(0,1)) + theme_net
@

\begin{figure}
\centering
\includegraphics[width=\textwidth]{figure/yeast_ex-1.pdf}
\caption{\label{fig.cap:yeast_ex} Complete protein-protein interaction network in \emph{S. cerevisiae}.}
\end{figure}
\afterpage{\clearpage}


\section{Technical Details}
\sctq{I have no idea exactly how detailed I should be. I'm going to attempt to be detailed without parsing each line in the code, but I do want to describe how everything works in detailed enough descriptions. I know you'll tell me if I'm too detailed or not detailed enough!}
\hh{You're doing just fine, keep going!}

\hh{XXX have a look at the ggplot2 help online and include something along these lines for both stat_net and geom_net}

\sct{
In order to construct the \texttt{geom} in \texttt{ggplot2}, we needed two \texttt{R} script files: a `stat' file and a `geom' file. The stat file performs all the necessary calculations on the two input data frames, and the geom file performs the drawing of the network.
  \subsection{Creating \texttt{stat\_net}}
  In order to plot the network with only the edge connections and vertex names, we relied on the \texttt{sna} and \texttt{network} packages \citep{sna, network.jss}. First, we used the edges data frame to construct a network object with the \texttt{as.network()} function, then constructed an adjacency matrix from that network using the \texttt{as.matrix.network.adjacency()} function.  This adjacency matrix is then passed to the chosen \texttt{gplot.layout.*()} function from the \texttt{sna} package.  \emph{When the layout argument is changed in the \texttt{geom\_net()} function, the corresponding \texttt{gplot.layout.*()} function in \texttt{sna} is called with a \texttt{do.call()} statement.} This layout function produces a matrix of coordinates of the vertices, which we then transform into a data frame containing the coordinates of the edges using the \texttt{as.matrix.network.edgelist()} function in \texttt{network}.  We are grateful to Moritz Marbach for his \texttt{gplot()} function which we used when creating this process \citep{marbach}.  At the end of the previous routine, we have a data frame with \texttt{x, y, xend,} and \texttt{yend} columns describing the edges and another data frame with \texttt{x,y} columns describing the vertices.  These two data frames, along with the many \texttt{aes()} and other argument options get passed on to the actual network geometry for drawing.
  \subsection{Creating \texttt{geom\_net}}
\hh{mention that a network is constructed from different layers - the node layer of points, an edge layer of line segments and an optional text layer of labels. }

  We constructed \texttt{geom\_net} using the drawing capabilities of the \texttt{geom\_point}, \texttt{geom\_line}, \emph{and \texttt{geom\_text}} functions that were already in \texttt{ggplot2}.  Using these capabilities, we were able to seamlessly incorporate our network geometry into the \texttt{ggplot2} structure.   We took our edges data frame and used that as our input to the \texttt{GeomSegment} draw function.  Then, on top of that, we plot the vertices by passing our vertex data frame to the \texttt{GeomPoint} draw function. Finally, we use the \texttt{GeomText} draw function to add the vertex labels when the \texttt{vlabel} argument is TRUE. We added an if/else statement in the \texttt{draw} function which created a labeling layer which is \texttt{NULL} if \texttt{vlabel = FALSE}, which is the default. We then created a new data frame for the label layer. This allows the vertex properties to be propogated through to the labels, including size and color.}

\bibliographystyle{asa}
\bibliography{references}

\end{document}
